# kubernetes/namespace.yaml
apiVersion: v1
kind: Namespace
metadata:
  name: backstage
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-storage-claim
  namespace: backstage
spec:
  storageClassName: csi-sc-viettelplugin-ssd
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10G
---
# kubernetes/postgres-secrets.yaml
apiVersion: v1
kind: Secret
metadata:
  name: postgres-secrets
  namespace: backstage
type: Opaque
data:
  POSTGRES_USER: YmFja3N0YWdl
  POSTGRES_PASSWORD: aHVudGVyMg==
---
# kubernetes/postgres.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: postgres
  namespace: backstage
spec:
  replicas: 1
  selector:
    matchLabels:
      app: postgres
  template:
    metadata:
      labels:
        app: postgres
    spec:
      containers:
        - name: postgres
          image: postgres:13.2-alpine
          imagePullPolicy: 'IfNotPresent'
          ports:
            - containerPort: 5432
          envFrom:
            - secretRef:
                name: postgres-secrets
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgresdb
              subPath: data
      volumes:
        - name: postgresdb
          persistentVolumeClaim:
            claimName: postgres-storage-claim

---
apiVersion: v1
kind: Service
metadata:
  name: postgres
  namespace: backstage
spec:
  selector:
    app: postgres
  ports:
    - port: 5432
---
# kubernetes/backstage.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: backstage
  namespace: backstage
spec:
  replicas: 3
  selector:
    matchLabels:
      app: backstage
  template:
    metadata:
      labels:
        app: backstage
    spec:
      containers:
        - name: backstage
          image: hoangndst/backstage:v1.3
          ports:
            - name: http
              containerPort: 7007
              protocol: TCP
          env:
            - name: DOCKER_HOST
              value: tcp://127.0.0.1:2375
          volumeMounts:
            - name: app-config
              mountPath: /app/app-config.yaml
              subPath: app-config.yaml
            - name: tmp
              mountPath: /tmp/
          imagePullPolicy: IfNotPresent
        - name: docker
          image: docker:dind
          args:
            - '--bip=192.168.1.1/24'
          ports:
            - containerPort: 2375
              protocol: TCP
          env:
            - name: DOCKER_TLS_CERTDIR
              value: ''
          volumeMounts:
            - name: tmp
              mountPath: /tmp/
          imagePullPolicy: IfNotPresent
          securityContext:
            privileged: true
        - name: netshoot
          image: nicolaka/netshoot
          command:
            - /bin/bash
          args:
            - '-c'
            - while true; do ping localhost; sleep 60;done
          imagePullPolicy: Always
      volumes:
        - name: app-config
          configMap:
            name: backstage-config
        - name: tmp
          emptyDir: {}
---
# configmap/backstage-config.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: backstage-config
  namespace: backstage
data:
  app-config.yaml: |-
    app:
      title: Viettel Internal Developer Platform
      baseUrl: https://backstage.gitlabcloud.online

    organization:
      name: Viettel Cloud

    backend:
      # Used for enabling authentication, secret is shared by all backend plugins
      # See https://backstage.io/docs/auth/service-to-service-auth for
      # information on the format
      # auth:
      #   keys:
      #     - secret: ${BACKEND_SECRET}
      baseUrl: https://backstage.gitlabcloud.online
      listen:
        port: 7007
        # Uncomment the following host directive to bind to specific interfaces
        # host: 127.0.0.1
      csp:
        connect-src: ["'self'", 'http:', 'https:']
        # Content-Security-Policy directives follow the Helmet format: https://helmetjs.github.io/#reference
        # Default Helmet Content-Security-Policy values can be removed by setting the key to false
      cors:
        origin: https://backstage.gitlabcloud.online
        methods: [GET, HEAD, PATCH, POST, PUT, DELETE]
        credentials: true
      # This is for local development only, it is not recommended to use this in production
      # The production database configuration is stored in app-config.production.yaml
      database:
        client: pg
        connection:
          host: postgres.backstage.svc.cluster.local
          port: 5432
          user: backstage
          password: hunter2
      # workingDirectory: /tmp # Use this to configure a working directory for the scaffolder, defaults to the OS temp-dir
      reading:
        allow:
          - host: 'gitlab.gitlabcloud.online'

    integrations: 
      gitlab:
        - host: gitlab.gitlabcloud.online
          token: glpat-cpz3j7ubRSraGZXxsrF9
          apiBaseUrl: https://gitlab.gitlabcloud.online/api/v4
          baseUrl: https://gitlab.gitlabcloud.online
    proxy:
      enpoints:
        '/gitlab/api':
          target: https://gitlab.gitlabcloud.online/api/v4
          allowedHeaders: ['Authorization', 'Content-Type']
          headers:
            Accept: application/json 
            Content-Type: application/json

    # Reference documentation http://backstage.io/docs/features/techdocs/configuration
    # Note: After experimenting with basic setup, use CI/CD to generate docs
    # and an external cloud storage when deploying TechDocs for production use-case.
    # https://backstage.io/docs/features/techdocs/how-to-guides#how-to-migrate-from-techdocs-basic-to-recommended-deployment-approach
    techdocs:
      builder: 'local' # Alternatives - 'external'
      generator:
        runIn: 'docker' # Alternatives - 'local'
        dockerImage: 'spotify/techdocs'
        pullImage: true
      publisher:
        type: 'local' # Alternatives - 'googleGcs' or 'awsS3'. Read documentation for using alternatives.

    auth:
      environment: development
      # see https://backstage.io/docs/auth/ to learn about auth providers
      providers:
        gitlab:
          development:
            clientId: c9178af5e9bc888c56cd9d3c03b2f80d2b41acce6b335e67773f954da31946ab
            clientSecret: gloas-5e52ca44f79dae9cd814986eb2b0bfe519aa984b15be9eac9a1a0fae004a1f2d
            audience: https://gitlab.gitlabcloud.online
            signIn:
              resolvers:
                - resolver: usernameMatchingUserEntityName


    scaffolder:
      # see https://backstage.io/docs/features/software-templates/configuration for software template options
      defaultBranch: main
      defaultAuthor:
        name: hoangndst
        email: hoangndst@gmail.com
      defaultCommitMessage: "Initial commit"

    catalog:
      providers:
        gitlab:
          yourProviderId:
            host: gitlab.gitlabcloud.online # Identifies one of the hosts set up in the integrations
            orgEnabled: true
            branch: main # Optional. Used to discover on a specific branch
            fallbackBranch: main # Optional. Fallback to be used if there is no default branch configured at the Gitlab repository. It is only used, if `branch` is undefined. Uses `master` as default
            skipForkedRepos: false # Optional. If the project is a fork, skip repository
            entityFilename: catalog-info.yaml # Optional. Defaults to `catalog-info.yaml`
            projectPattern: '[\s\S]*' # Optional. Filters found projects based on provided patter. Defaults to `[\s\S]*`, which means to not filter anything
            schedule: # Same options as in TaskScheduleDefinition. Optional for the Legacy Backend System
              # supports cron, ISO duration, "human duration" as used in code
              frequency: { minutes: 30 }
              # supports ISO duration, "human duration" as used in code
              timeout: { minutes: 3 }
      # import:
      #   entityFilename: catalog-info.yaml
      #   pullRequestBranchName: backstage-integration
      rules:
        - allow: [Component, Template, System, API, Resource, Location]
      locations:
        - type: url
          target: https://gitlab.gitlabcloud.online/group-01/viettel-cloud-backstage/-/blob/main/templates/templates.yaml
        - type: url
          target: https://gitlab.gitlabcloud.online/group-01/viettel-cloud-backstage/-/blob/main/entities/entities.yaml
          rules:
            - allow: [Entity]
        
        # Backstage example components
        - type: url
          target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-components.yaml

        # Backstage example systems
        - type: url
          target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-systems.yaml

        # Backstage example APIs
        - type: url
          target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-apis.yaml

        # Backstage example organization groups
        - type: url
          target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/acme/org.yaml

        # Backstage example domains
        - type: url
          target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-domains.yaml

        # Backstage example resources
        - type: url
          target: https://github.com/backstage/backstage/blob/master/packages/catalog-model/examples/all-resources.yaml
---
# kubernetes/backstage-service.yaml
apiVersion: v1
kind: Service
metadata:
  name: backstage
  namespace: backstage
spec:
  selector:
    app: backstage
  ports:
    - name: http
      port: 80
      targetPort: http
---
# kubernetes/ingress.yaml
# apiVersion: networking.k8s.io/v1
# kind: Ingress
# metadata:
#   name: backstage
#   namespace: backstage
# spec:
#   ingressClassName: gitlab-nginx
#   tls:
#     - hosts:
#         - backstage.gitlabcloud.online
#       secretName: gitlab-gitlab-tls
#   rules:
#     - host: backstage.gitlabcloud.online
#       http:
#         paths:
#           - path: /
#             pathType: Prefix
#             backend:
#               service:
#                 name: backstage
#                 port:
#                   number: 80
---